PipeRead "echo Echo Config load started at $(date)"

# This makes ibus trigger appropriately without having to edit shell
# environment settings with separate .rc files.
SetEnv GTK_IM_MODULE ibus
SetEnv XMODIFIERS @im=ibus
SetEnv QT_IM_MODULE ibus

# Configurable preference variables -- I set a bunch of variables at the top of
# my config.  These are all default values for the preference.  To change these
# values, I create additional configuration files under $[fvwm_preferences_dir]
# where I over-ride the values set here (via SetEnv FOO bar in files there).

# Color Preferences
SetEnv FG_COLOR gray90
SetEnv BG_COLOR #4A516A
SetEnv FG_COLOR_INACTIVE gray70
SetEnv BG_COLOR_INACTIVE #4A516A
SetEnv HILIGHT_FORE white
SetEnv HILIGHT_BACK #7d849d
SetEnv SHADE #000000
SetEnv FGSHADOW #000000
# Window borders
SetEnv BORDER_ACTIVE #4a516a
SetEnv BORDER_INACTIVE #4a516a

SetEnv DESK_COUNT 10

##
# Valid options: -- flat NoInset
SetEnv BORDER_STYLE "simple -- HiddenHandles"

# Icons on the desk will be this size:
SetEnv ICON_SIZE 64x64

# Icons in title bars will be this size:
SetEnv MINI_ICON_SIZE 24x24

# Size used in screenshot menu
SetEnv SCREEN_SHOT_SCALE 256

# Size used in wallpaper menu
SetEnv WALLPAPER_SCALE 128

SetEnv MENU_FONT_FAMILY "DejaVu Sans Mono"
SetEnv MENU_FONT_SIZE 20

SetEnv MENU_BORDER_SIZE 2
SetEnv WINDOW_BORDER_SIZE 2

SetEnv DEFAULT_FONT_FAMILY "Droid Sans Mono"
SetEnv DEFAULT_FONT_SIZE 12

# Sizes for DesktopSize
SetEnv PAGES_X 1
SetEnv PAGES_Y 3

SetEnv DESKTOP_SCALE 10

# The Pager size can be over-ridden via a preference file, but the default
# Is on the right side of the desk, at the bottom of the screen.
SetEnv RIGHT_BAR_GEOMETRY -0-0

# Default modifier key is 4 (Win Key) for key bindings
SetEnv MOD_KEY 4

# Default position of window titles is at the top of the window,
# so it can be modified by a menu.
SetEnv TITLE_POSITION TitleAtTop

SetEnv ICONBOX_GEOMETRY $[vp.width]x$[vp.height]

SetEnv ICONFILL_UD Bottom
SetEnv ICONFILL_LR Left

# Settings menu entry for volume control
SetEnv VOLUME_APP "x-terminal-emulator -e alsamixer"
Test (x pavucontrol) SetEnv VOLUME_APP pavucontrol
# Various file browsing entries need this
SetEnv FILEBROWSER_APP "x-terminal-emulator -e vim"
Test (x nautilus) SetEnv FILEBROWSER_APP "nautilus --no-desktop"
Test (x rox) SetEnv FILEBROWSER_APP "rox"
Test (x thunar) SetEnv FILEBROWSER_APP "thunar"
Test (x pcmanfm) SetEnv FILEBROWSER_APP "pcmanfm"

# These are used to avoid hard-coded paths in the config file.
SetEnv fvwm_wallpapers_dir "$[FVWM_USERDIR]/wallpapers"
SetEnv fvwm_screenshots_dir "$[FVWM_USERDIR]/screenshots"
SetEnv fvwm_icons_dir "$[FVWM_USERDIR]/icons"

SetEnv fvwm_preferences_dir "$[FVWM_USERDIR]/preferences"
SetEnv fvwm_color_scheme_preference "$[fvwm_preferences_dir]/color_scheme"
SetEnv fvwm_font_preferences "$[fvwm_preferences_dir]/font"
SetEnv fvwm_key_preferences "$[fvwm_preferences_dir]/modifier_key"
SetEnv fvwm_title_preferences "$[fvwm_preferences_dir]/title_position"
SetEnv fvwm_pager_preferences "$[fvwm_preferences_dir]/pager_settings"
SetEnv fvwm_desk_preferences "$[fvwm_preferences_dir]/desk_settings"

# These are so it's easier to change titlebar button positions
SetEnv fvwm_title_button_miniicon 1
SetEnv fvwm_title_button_clip 2
SetEnv fvwm_title_button_arrow_up 4

#
# This puts the icons directory content in the image search path.
ImagePath $[fvwm_icons_dir]:+

SetEnv ACTIVE_GRADIENT CGradient
SetEnv INACTIVE_GRADIENT CGradient

# This is where I save/load the current wallpaper (SetEnv WALLPAPER path.png)
SetEnv fvwm_wallpaper_preference "$[fvwm_preferences_dir]/wallpaper"

DestroyFunc ReStyle

# This block creates the directories needed for my config to function
# correctly.
Test (!x "$[fvwm_wallpapers_dir]") Exec exec mkdir -p "$[fvwm_wallpapers_dir]"
Test (!x "$[fvwm_screenshots_dir]") Exec exec mkdir -p "$[fvwm_screenshots_dir]"
Test (!x "$[fvwm_preferences_dir]") Exec exec mkdir -p "$[fvwm_preferences_dir]"
#Test (!x "$[fvwm_icons_dir]") Exec exec mkdir -p "$[fvwm_icons_dir]"

# Now, read all over-rides from the preferences directory
# This must happen early in the config so that colorsets and other
# configurations that use the variables are set early enough.
Test (f "$[fvwm_preferences_dir]") PipeRead 'for f in "$[fvwm_preferences_dir]"/*; do \
    cat $f ; \
    echo Echo loaded preferences from $f ; \
    done'


# Font settings are constructed from variables stored as pieces
SetEnv DEFAULT_FONT "xft:$[DEFAULT_FONT_FAMILY]:size=$[DEFAULT_FONT_SIZE]"
SetEnv MENU_FONT "xft:$[MENU_FONT_FAMILY]:size=$[MENU_FONT_SIZE]"
DefaultFont "$[DEFAULT_FONT]"

# This next block contains page size, edge scrolling, and geometry window
# settings.
# ┌─────┐
# │  0  │  I like a 1x9 vertical desktop of pages.  And while I
# │┄┄┄┄┄│  don't like the mouse making the page scroll when the
# │  1  │  edge of the screen is reached, I do like being able
# │┄┄┄┄┄│  to drag windows across pages and have the page switch
# │  2  │  while doing so.
# │┄┄┄┄┄│
# │  3  │  I also think the Geometry Window that displays X and
# │┄┄┄┄┄│  Y coordinates while dragging a window is really only
# │  4  │  useful in a handful of situations, so I hide that.
# │┄┄┄┄┄│
# │  ⋮  │  I also like to see the window contents while
# └─────┘  dragging a window.
#
DesktopSize $[PAGES_X]x$[PAGES_Y]
EdgeScroll 0 0
EdgeThickness 1
HideGeometryWindow Always
OpaqueMoveSize unlimited

# ┌─────┬─────────────────────────────────────────────────────────┬─────┬─────┐
# │ I-1 │                           Title                         │ I-4 │ I-2 │
# └─────┴─────────────────────────────────────────────────────────┴─────┴─────┘
# This block defines how windows and menus are decorated and colored.
#
# Window titles are a blueish color with white text and inactive windows have a
# gray title.  The blue really looks better with transparency turned on (ala
# xcompmgr.)  All titles have a flat-ish look with no 3D bevels.  I eschewed
# the flat style option and instead got rid of the handles but not the inset so
# that I could get a sort of double-single-line border.  It still doesn't have
# the annoying 3d look, but it does make it easier to see a window border when
# the background would otherwise blend in -- such as was happening with
# terminals.
#
# (Colorset colors are controlled via variables, so these are configurable and
# can be changed at run time through a menu.)
#
# Icon 1 is a mini icon for the window that pops up a dynamic options list and
# Icon 2 is a paper clip icon that toggles window stickiness.
# Icon 4 is an up arrow that does a custom maximize (see CustomMax function).
# Icons are only displayed for the currently active window.
#
# Menus are also flat, the flat border is accomplished by setting the
# MenuColorset hi and sh colors to the same value so that the border's fake
# 3D look uses the same color.  Increasing the width then gives it a nice
# bold look, but the popupoffset has to be adjusted to prevent the double
# border between menus effect.  So, set the PopupOffset's first argument to
# the negative value of the border width for menus.

DestroyFunc ChangeColor
AddToFunc ChangeColor
+ I SetEnv FG_COLOR $0
+ I SetEnv BG_COLOR $1
+ I SetEnv FG_COLOR_INACTIVE $2
+ I SetEnv BG_COLOR_INACTIVE $3
+ I SetEnv HILIGHT_FORE $4
+ I SetEnv HILIGHT_BACK $5
+ I SetEnv SHADE $6
+ I SetEnv FGSHADOW $7
+ I SetEnv BORDER_ACTIVE $8
+ I SetEnv BORDER_INACTIVE $9
+ I PipeRead ' \
echo SetEnv FG_COLOR \'$0\' > $[fvwm_color_scheme_preference] ; \
echo SetEnv BG_COLOR \'$1\' >> $[fvwm_color_scheme_preference] ; \
echo SetEnv FG_COLOR_INACTIVE \'$2\' >> $[fvwm_color_scheme_preference] ; \
echo SetEnv BG_COLOR_INACTIVE \'$3\' >> $[fvwm_color_scheme_preference] ; \
echo SetEnv HILIGHT_FORE \'$4\' >> $[fvwm_color_scheme_preference] ; \
echo SetEnv HILIGHT_BACK \'$5\' >> $[fvwm_color_scheme_preference] ; \
echo SetEnv SHADE \'$6\' >> $[fvwm_color_scheme_preference] ; \
echo SetEnv FGSHADOW \'$7\' >> $[fvwm_color_scheme_preference]; \
echo SetEnv BORDER_ACTIVE \'$8\' >> $[fvwm_color_scheme_preference] ; \
echo SetEnv BORDER_INACTIVE \'$9\' >> $[fvwm_color_scheme_preference]; \
'
+ I Schedule 250 FinishColorUpdate

# Reads the ColorSet values from preference file and then
# schedules updating the ones that are actively in use.
DestroyFunc DoColorSets
AddToFunc DoColorSets
+ I Read "$[fvwm_color_scheme_preference]"
+ I Schedule 250 FinishColorUpdate


##
# Colorset 0 - "Default".  Active title bar, hilight, icon hilight, menus.
# Colorset 1 - Default inactive.  Inactive title bar, inactive buttons in the
#              title.
# Colorset 2 -  No longer used.
# Colorset 3 -  No longer used.
# Colorset 4 -  Active window border
# Colorset 5 -  Inactive window border
# Colorset 6 -  Window pager itself.
# Updates the ColorSets so that a restart isn't needed when
# they are modified.
DestroyFunc FinishColorUpdate
AddToFunc FinishColorUpdate
+ I ColorSet 0 Tint $[BG_COLOR] 50, bg $[BG_COLOR], fg $[FG_COLOR], fgsh $[FGSHADOW], hi $[HILIGHT_FORE], sh $[SHADE], $[ACTIVE_GRADIENT] 40 $[HILIGHT_BACK] $[BG_COLOR]
+ I ColorSet 1 bg $[BG_COLOR_INACTIVE], fg $[FG_COLOR_INACTIVE],fgsh $[FGSHADOW], hi $[HILIGHT_FORE], sh $[SHADE], $[INACTIVE_GRADIENT] 40 $[HILIGHT_BACK] $[BG_COLOR_INACTIVE]
+ I ColorSet 2 bg $[BG_COLOR_INACTIVE], fg $[FG_COLOR_INACTIVE], fgsh $[FGSHADOW], hi $[HILIGHT_FORE], sh $[SHADE]
+ I ColorSet 4 Tint $[BG_COLOR] 50, bg $[BORDER_ACTIVE], fg $[FG_COLOR], fgsh $[FGSHADOW], hi $[HILIGHT_FORE], sh $[SHADE]
+ I ColorSet 5 Tint $[BG_COLOR] 50, bg $[BORDER_INACTIVE], fg $[FG_COLOR], fgsh $[FGSHADOW], hi $[HILIGHT_FORE], sh $[SHADE]
+ I ColorSet 6 RootTransparent Buffer, Tint $[BG_COLOR] 50, bg $[BORDER_INACTIVE], fg $[FG_COLOR], fgsh $[FGSHADOW], hi $[HILIGHT_FORE], sh $[SHADE]
+ I ReStyle

AddToDecor DefaultDecor
+ TitleStyle Inactive (Colorset 1 -- flat)
+ TitleStyle Active (Colorset 0 -- flat)
+ ButtonStyle All Active (Colorset 0 -- flat)
+ ButtonStyle All ActiveDown (Colorset 1 -- flat)
+ ButtonStyle All Inactive (Colorset 1 -- flat)
+ AddButtonStyle $[fvwm_title_button_miniicon] Active MiniIcon (HiddenHandles NoInset Hilight3Doff -- flat)
+ AddButtonStyle $[fvwm_title_button_clip] Active (Pixmap paperclip.svg:14x14 -- flat)
+ AddButtonStyle $[fvwm_title_button_arrow_up] Active (Pixmap arrow-up.svg:14x14 -- flat)
+ BorderStyle $[BORDER_STYLE]

AddToFunc ReStyle
+ I Style DefaultStyle UseDecor DefaultDecor
+ I Style DefaultStyle Colorset 1
+ I Style DefaultStyle HilightIconTitleColorset 0
+ I Style DefaultStyle BorderWidth $[WINDOW_BORDER_SIZE], HandleWidth $[WINDOW_BORDER_SIZE]
+ I Style DefaultStyle BorderColorset 5
+ I Style DefaultStyle HilightBorderColorset 4
+ I MenuStyle "*" MenuColorset 0, BorderWidth $[MENU_BORDER_SIZE], ItemFormat "%s %| %i %l %|% %> ", \
          PopupOffset -0 100, Hilight3DOff, ActiveFore $[HILIGHT_FORE], ForeGround \
          $[FG_COLOR], HilightBack $[HILIGHT_BACK], Font "$[MENU_FONT]", \
          TrianglesSolid, PopdownDelay 500
+ I Style DefaultStyle HilightBack $[HILIGHT_BACK]
+ I Style DefaultStyle HilightFore $[HILIGHT_FORE]
+ I Style DefaultStyle IconBackgroundPadding 1
+ I Style DefaultStyle IconBackgroundRelief 0
+ I Style DefaultStyle IconBox $[ICONBOX_GEOMETRY], IconFill $[ICONFILL_UD] $[ICONFILL_LR]
+ I Style DefaultStyle IconOverride
+ I Style DefaultStyle IconTitleColorset 1
+ I Style DefaultStyle HilightIconTitleColorset 0
+ I Style DefaultStyle IconTitleRelief 0
+ I Style DefaultStyle TileCascadePlacement
+ I Style DefaultStyle SloppyFocus
+ I Style DefaultStyle SnapAttraction 3 SameType Screen
+ I Style DefaultStyle $[TITLE_POSITION]
+ I Style DefaultStyle HilightColorset 0
+ I Style DefaultStyle !FPGrabFocus, GrabFocusOff
+ I Style "*" UseStyle DefaultStyle
+ I Style "*Shroud of the Avatar*" NoTitle, BorderWidth 0, HandleWidth 0
+ I Style trayer NoTitle, WindowListSkip, NeverFocus, BorderWidth 0, HandleWidth 0
+ I Style tint2 NoTitle, WindowListSkip, NeverFocus, BorderWidth 0, HandleWidth 0
+ I Style "*" !FPGrabFocus, GrabFocusOff
+ I Style FvwmForm-QuitForm !Title
+ I Style bar !Title, NeverFocus, WindowListSkip

#
#  Menu formats are a little tricky to describe, but the FVWM man page does a
#  great job, search it for ItemFormat.
#
#  ┌────┬──────────────────────────┐┌───┬──────────┐
#  │ S  │   Active Sub menu      ▷ ││ s │ item     │
#  │ i  │   Inactive sub menu    ▶ ││ i │ item     │
#  │ d  │ ⓘ item with icon         ││ d │ item     │
#  │ e  │   item without icon      ││ e │  ⋮       │
#  │    │           ⋮              ││   │  ⋮       │
#  │ g  │           ⋮              ││ g │  ⋮       │
#  │ r  │           ⋮              ││ r │  ⋮       │
#  │ a  │           ⋮              ││ ⋮ │  ⋮       │
#  │ p  │           ⋮              │└───┴──────────┘
#  │ h  │           ⋮              │
#  │ i  │           ⋮              │
#  │ c  │           ⋮              │
#  └────┴──────────────────────────┘
#
#

# Set up icons for stuff...
AddToFunc ReStyle
+ I Style "Android SDK Manager" Icon 097-download.svg:$[ICON_SIZE], MiniIcon 097-download.svg:$[MINI_ICON_SIZE], EWMHMiniIconOverride, DecorateTransient
+ I Style "Apvlv" MiniIcon 475-file-pdf.svg:$[MINI_ICON_SIZE]
+ I Style "blobwars" Icon 343-radio-unchecked.svg:$[ICON_SIZE], MiniIcon 343-radio-unchecked.svg:$[MINI_ICON_SIZE]
+ I Style "* - Chat" MiniIcon 111-bubble2.svg:$[MINI_ICON_SIZE], EWMHMiniIconOverride
+ I Style "Chromium-browser" Icon 474-chrome.svg:$[ICON_SIZE], MiniIcon 474-chrome.svg:$[MINI_ICON_SIZE], EWMHMiniIconOverride
+ I Style "FightTheDragon" NoTitle
+ I Style "Firefox*" Icon firefox.svg:$[ICON_SIZE], MiniIcon firefox.svg:$[MINI_ICON_SIZE], EWMHMiniIconOverride
+ I Style "Freeciv" Icon 004-office.svg:$[ICON_SIZE], MiniIcon 004-office.svg:$[MINI_ICON_SIZE]
+ I Style "Friends" MiniIcon 113-bubbles4.svg:$[MINI_ICON_SIZE], EWMHMiniIconOverride
+ I Style "FvwmIdent" Icon question.svg:$[ICON_SIZE], MiniIcon question.svg:$[MINI_ICON_SIZE]
+ I Style "Gimp" MiniIcon image.svg:$[MINI_ICON_SIZE], EWMHMiniIconOverride
+ I Style "Inkscape" Icon 344-crop.svg:$[ICON_SIZE], MiniIcon 344-crop.svg:$[MINI_ICON_SIZE], EWMHMiniIconOverride
+ I Style "Layers - Brushes" MiniIcon 015-images.svg:$[MINI_ICON_SIZE], EWMHMiniIconOverride
+ I Style "Minetest*" NoTitle
+ I Style "MPlayer" Icon 278-play2.svg:$[ICON_SIZE], MiniIcon 278-play2.svg:$[MINI_ICON_SIZE]
+ I Style "*nautilus*" MiniIcon folder.svg:$[MINI_ICON_SIZE], EWMHMiniIconOverride
+ I Style "oclock" NoTitle, StaysOnBottom, Sticky, WindowListSkip, NeverFocus, CirculateSkip
+ I Style "POWDER" Icon 152-magic-wand.svg:$[ICON_SIZE], MiniIcon 152-magic-wand.svg:$[MINI_ICON_SIZE]
+ I Style "*rox*" MiniIcon folder.svg:$[MINI_ICON_SIZE], EWMHMiniIconOverride
+ I Style "*rxvt*" Icon terminal.svg:$[ICON_SIZE], MiniIcon terminal.svg:$[MINI_ICON_SIZE]
+ I Style "Steam" NoIcon, Icon steam.svg:$[ICON_SIZE], MiniIcon 429-steam.svg:$[MINI_ICON_SIZE], EWMHMiniIconOverride
+ I Style "Toolbox*" Icon cudgel.svg:$[ICON_SIZE], MiniIcon cudgel.svg:$[MINI_ICON_SIZE], EWMHMiniIconOverride
+ I Style "URxvt" Icon terminal.svg:$[ICON_SIZE], Icon terminal.svg:$[ICON_SIZE], MiniIcon terminal.svg:$[MINI_ICON_SIZE]
+ I Style "Vim" Icon code.svg:$[ICON_SIZE], MiniIcon code.svg:$[MINI_ICON_SIZE]
+ I Style "Vim *" MiniIcon code.svg:$[MINI_ICON_SIZE]
+ I Style "xcalc" MiniIcon 065-calculator.svg:$[MINI_ICON_SIZE]
+ I Style "XClipboard" Icon paste.svg:$[ICON_SIZE], MiniIcon paste.svg:$[MINI_ICON_SIZE]

# Bind left clicking I-1 to the options menu, but double-click should close the
# window.  More specifically, double click will close, single clicking will
# display a menu, holding the mouse down will display a menu, and moving the
# mouse while clicking it will move the window.
DestroyFunc Ops-or-Close
AddToFunc Ops-or-Close
+ D Close
+ C Menu DynamicWindowOpsMenu
+ H Menu DynamicWindowOpsMenu
+ M Move

# The root menu consists of the following:
# ┌─────────────────┐
# │ Apps          ▷ │
# │ Games         ▷ │
# │ Screenshots   ▷ │
# │ Settings      ▷ │
# ├─────────────────┤
# │ Reload          │
# │ Lock            │
# │ Exit            │
# └─────────────────┘
DestroyMenu MenuFvwmRoot
AddToMenu MenuFvwmRoot
+ "%enter.svg:$[MINI_ICON_SIZE]%Apps" Popup DynamicAppMenu
+ "%happy.svg:$[MINI_ICON_SIZE]%Games" Popup DynamicGameMenu
+ MissingSubmenuFunction ScreenshotBrowser
+ "%display.svg:$[MINI_ICON_SIZE]%Screenshots" Popup "$[fvwm_screenshots_dir]"
+ "%cogs.svg:$[MINI_ICON_SIZE]%Settings" Popup SettingsMenu
+ "%sliders.svg:$[MINI_ICON_SIZE]%Status" Popup StatusMenu
+ "" Nop
+ "%repeat.svg:$[MINI_ICON_SIZE]%Reload" Restart
# Put a lock icon in the menu if xscreensaver is present
Test (x xscreensaver) AddToMenu MenuFvwmRoot "%unlock.svg:$[MINI_ICON_SIZE]%Lock" Exec exec xscreensaver-command -lock
# Put the exit option at the end of the menu
AddToMenu MenuFvwmRoot
+ "%sign-out.svg:$[MINI_ICON_SIZE]%Exit" FvwmForm FvwmForm-QuitForm


#
# The settings menu consists of the following:
# ┌─────────────────────────┐
# │      FVWM Settings      │
# ├─────────────────────────┤
# │ Console                 │
# │ Colors                ▷ │
# │ Fonts                 ▷ │
# │ Modifier Key          ▷ │
# │ Wallpaper             ▷ │
# │ Window Title Position ▷ │
# ├─────────────────────────┤
# │         System          │
# │ Wifi                  ▷ │
# │ Displays              ▷ │
# │ Volume Control          │
# │ Bluetooth Wizard        │
# │ Bluetooth Manager       │
# └─────────────────────────┘

DestroyMenu SettingsMenu
AddToMenu SettingsMenu
+ "FVWM Settings" Title
+ MissingSubmenuFunction WallpaperBrowser
+ "%terminal.svg:$[MINI_ICON_SIZE]%Console" FvwmConsole
+ "%eyedropper.svg:$[MINI_ICON_SIZE]%Colors" Popup ThemeMenu
+ "%font.svg:$[MINI_ICON_SIZE]%Fonts" Popup FontsMenu
+ "Borders" Popup BordersMenu
+ "%keyboard.svg:$[MINI_ICON_SIZE]%Modifier Key" Popup KeysMenu
+ "%image.svg:$[MINI_ICON_SIZE]%Wallpaper" Popup "$[fvwm_wallpapers_dir]"
+ "%minus.svg:$[MINI_ICON_SIZE]%Window Title Position" Popup TitlesMenu
+ "%bars.svg:$[MINI_ICON_SIZE]%Configure Pager" Popup PagerMenu
+ "Configure Desks" Popup DesksMenu
+ "System" Title
Test (x wifi.sh) AddToMenu SettingsMenu "%wifi.svg:$[MINI_ICON_SIZE]%Wifi" Popup WifiMenu
AddToMenu SettingsMenu "%display.svg:$[MINI_ICON_SIZE]%Displays" Popup DisplaysMenu
AddToMenu SettingsMenu "%volume-up.svg:$[MINI_ICON_SIZE]%Volume Control" LaunchWarp "$[VOLUME_APP]"

DestroyMenu WifiMenu
AddToMenu WifiMenu
+ DynamicPopupAction CreateWifiMenu

DestroyFunc CreateWifiMenu
AddToFunc CreateWifiMenu
+ I DestroyMenu recreate WifiMenu
+ I PipeRead 'SSID=$(wifi.sh -e) ; test ! -z "$SSID" && echo "AddToMenu WifiMenu \\"Connected: $SSID\\" Title" || echo "AddToMenu WifiMenu \\"Not Connected\\" Title"'
+ I AddToMenu WifiMenu "Connect to any" LaunchWarp x-terminal-emulator +sb -e wifi.sh -a
+ I AddToMenu WifiMenu "Disconnect" LaunchWarp x-terminal-emulator +sb -e wifi.sh -k

DestroyMenu StatusMenu
AddToMenu StatusMenu
+ DynamicPopupAction CreateStatusMenu

DestroyFunc CreateStatusMenu
AddToFunc CreateStatusMenu
+ I DestroyMenu recreate StatusMenu
+ I AddToMenu StatusMenu "Status Items" Title
+ I PipeRead ' \
    echo "AddToMenu StatusMenu \\"Uptime:   $(uptime -p)\\" Nop" ;\
    echo "AddToMenu StatusMenu \\"Mem:   $(free -h | grep Mem | awk \'{printf "%s/%s",$$$3,$$$2}\')\\" Nop" ;\
    echo "AddToMenu StatusMenu \\"Swap:  $(free -h | grep Swap | awk \'{printf "%s/%s",$$$3,$$$2}\')\\" Nop" '
+ I PipeRead ' \
    ls -l /sys/class/power_supply/*/capacity >/dev/null 2>/dev/null ; \
    if [ $? -eq 0 ] ; then \
        for CAPS in /sys/class/power_supply/*/capacity ; do \
            echo "AddToMenu StatusMenu \\"Battery: $(cat $CAPS)%%\\" Nop" ; \
        done ; \
    fi'

DestroyFunc MakeTitleMenu
AddToFunc MakeTitleMenu
+ I DestroyMenu recreate TitlesMenu
+ I PipeRead '\
if [ "$TITLE_POSITION" = "TitleAtTop" ] ; then \
    echo "AddToMenu TitlesMenu \\"[x] Top\\" SetTitlePosition TitleAtTop" ; \
else \
    echo "AddToMenu TitlesMenu \\"Top\\" SetTitlePosition TitleAtTop" ; \
fi ; \
if [ "$TITLE_POSITION" = "TitleAtLeft" ] ; then \
    echo "AddToMenu TitlesMenu \\"[x] Left\\" SetTitlePosition TitleAtLeft" ; \
else \
    echo "AddToMenu TitlesMenu \\"Left\\" SetTitlePosition TitleAtLeft" ; \
fi ; \
if [ "$TITLE_POSITION" = "TitleAtRight" ] ; then \
    echo "AddToMenu TitlesMenu \\"[x] Right\\" SetTitlePosition TitleAtRight" ; \
else \
    echo "AddToMenu TitlesMenu \\"Right\\" SetTitlePosition TitleAtRight" ; \
fi ; \
if [ "$TITLE_POSITION" = "TitleAtBottom" ] ; then \
    echo "AddToMenu TitlesMenu \\"[x] Bottom\\" SetTitlePosition TitleAtBottom" ; \
else \
    echo "AddToMenu TitlesMenu \\"Bottom\\" SetTitlePosition TitleAtBottom" ; \
fi'

DestroyMenu TitlesMenu
AddToMenu TitlesMenu
+ DynamicPopupAction MakeTitleMenu

DestroyFunc SetTitlePosition
AddToFunc SetTitlePosition
+ I Exec exec echo SetEnv TITLE_POSITION \"$0\" > "$[fvwm_title_preferences]"
+ I SetEnv TITLE_POSITION "$0"
+ I ReTitle

DestroyFunc ReTitle
AddToFunc ReTitle
+ I Style "*" $[TITLE_POSITION]

DestroyFunc MakeKeysMenu
AddToFunc MakeKeysMenu
+ I DestroyMenu recreate KeysMenu
+ I Test (EnvMatch MOD_KEY "4")   AddToMenu KeysMenu "[x] Windows Key" Nop
+ I Test (!EnvMatch MOD_KEY "4")  AddToMenu KeysMenu     "Windows Key" SetModifierKey 4
+ I Test (EnvMatch MOD_KEY "M")   AddToMenu KeysMenu "[x] Alt Key"     Nop
+ I Test (!EnvMatch MOD_KEY "M")  AddToMenu KeysMenu     "Alt Key"     SetModifierKey M
+ I Test (EnvMatch MOD_KEY "C")   AddToMenu KeysMenu "[x] Control Key" Nop
+ I Test (!EnvMatch MOD_KEY "C")  AddToMenu KeysMenu     "Control Key" SetModifierKey C
+ I Test (EnvMatch MOD_KEY "CM")  AddToMenu KeysMenu "[x] Control+Alt" Nop
+ I Test (!EnvMatch MOD_KEY "CM") AddToMenu KeysMenu     "Control+Alt" SetModifierKey CM

DestroyMenu KeysMenu
AddToMenu KeysMenu
+ DynamicPopupAction MakeKeysMenu

DestroyMenu PagerMenu
AddToMenu PagerMenu
+ DynamicPopupAction MakePagerMenu

DestroyMenu DesksMenu
AddToMenu DesksMenu
+ DynamicPopupAction MakeDesksMenu

DestroyFunc MakePagerMenu
AddToFunc MakePagerMenu
+ I DestroyMenu recreate PagerMenu
+ I AddToMenu PagerMenu "Desktop Size: $[PAGES_X]x$[PAGES_Y]" Popup PagerSizeMenu
+ I AddToMenu PagerMenu "Desktop Scale: $[DESKTOP_SCALE]" Popup PagerScaleMenu
+ I AddToMenu PagerMenu "%bars.svg:$[MINI_ICON_SIZE]%Toggle Pager" TogglePager

DestroyFunc MakeDesksMenu
AddToFunc MakeDesksMenu
+ I DestroyMenu recreate DesksMenu
+ I Test (x zenity) AddToMenu DesksMenu "Set Desk Count ($[DESK_COUNT])" PipeRead 'echo Echo Nop ; (N=$(zenity --entry --text "Desks") && FvwmCommand "UpdateDeskCount $$N" &) >/dev/null'
+ I TestRc (NoMatch) AddToMenu DesksMenu "Install zenity to enable."

DestroyFunc MakePagerScaleMenu
AddToFunc MakePagerScaleMenu
+ I DestroyMenu recreate PagerScaleMenu
+ I AddToMenu PagerScaleMenu "Increase Scale" IncreaseDesktopScale 1
+ I AddToMenu PagerScaleMenu "Decrease Scale" IncreaseDesktopScale -1

DestroyFunc IncreaseDesktopScale
AddToFunc IncreaseDesktopScale
+ I PipeRead 'echo SetEnv DESKTOP_SCALE $((DESKTOP_SCALE+$0))'
+ I UpdatePager

DestroyMenu PagerScaleMenu
AddToMenu PagerScaleMenu
+ DynamicPopupAction MakePagerScaleMenu

DestroyMenu PagerSizeMenu
AddToMenu PagerSizeMenu
+ DynamicPopupAction MakePagerSizeMenu

DestroyFunc MakePagerSizeMenu
AddToFunc MakePagerSizeMenu
+ I DestroyMenu recreate PagerSizeMenu
+ I AddToMenu PagerSizeMenu "Increase Pages Vertically" IncreasePages 0 1
+ I AddToMenu PagerSizeMenu "Decrease Pages Vertically" IncreasePages 0 -1
+ I AddToMenu PagerSizeMenu "Increase Pages Horizontally" IncreasePages 1 0
+ I AddToMenu PagerSizeMenu "Decrease Pages Horizontally" IncreasePages -1 0

DestroyFunc IncreasePages
AddToFunc IncreasePages
+ I PipeRead 'echo SetEnv PAGES_X $((PAGES_X+$0))'
+ I PipeRead 'echo SetEnv PAGES_Y $((PAGES_Y+$1))'
+ I UpdatePager

DestroyFunc SetModifierKey
AddToFunc SetModifierKey
+ I UnbindKeys
+ I Exec exec echo SetEnv MOD_KEY \"$0\" > "$[fvwm_key_preferences]"
+ I SetEnv MOD_KEY "$0"
+ I BindKeys


# Dynamic App Menu Generation
# If they exist, put rxvt, xterm, rox, nautilus ... in Apps menu:
Test (x rxvt) AddToMenu DynamicAppMenu "%terminal.svg:$[MINI_ICON_SIZE]%RXvt" LaunchWarp rxvt
Test (x xterm) AddToMenu DynamicAppMenu "%terminal.svg:$[MINI_ICON_SIZE]%XTerm" LaunchWarp xterm
AddToMenu DynamicAppMenu "%folder-open.svg:$[MINI_ICON_SIZE]%File Browser" LaunchWarp $[FILEBROWSER_APP]
Test (x password-gorilla) AddToMenu DynamicAppMenu "%key.svg:$[MINI_ICON_SIZE]%Password Gorilla" LaunchWarp password-gorilla
Test (x oclock) AddToMenu DynamicAppMenu "%clock.svg:$[MINI_ICON_SIZE]%oclock" Exec exec oclock -geometry -0+0 -bg black -fg "$[HILIGHT_BACK]" -bd "$[BG_COLOR]" -transparent

# Internet-related stuff
# If they exist, put firefox, chromium, and steam into the Apps menu:
Test (x elinks, x x-terminal-emulator) AddToMenu DynamicAppMenu "ELinks" LaunchWarp x-terminal-emulator -e elinks
Test (x firefox) AddToMenu DynamicAppMenu "%firefox.svg:$[MINI_ICON_SIZE]%Firefox" LaunchWarp firefox
Test (x finch, x x-terminal-emulator) AddToMenu DynamicAppMenu "%comments.svg:$[MINI_ICON_SIZE]%Finch" LaunchWarp x-terminal-emulator -tn rxvt -e finch
Test (x chromium-browser) AddToMenu DynamicAppMenu "%chrome.svg:$[MINI_ICON_SIZE]%Chromium" LaunchWarp chromium-browser
Test (x mumble) AddToMenu DynamicAppMenu "%bullhorn.svg:$[MINI_ICON_SIZE]%Mumble" LaunchWarp mumble
Test (x steam) AddToMenu DynamicAppMenu "%steam.svg:$[MINI_ICON_SIZE]%Steam" LaunchWarp steam
Test (x steam) AddToMenu DynamicAppMenu "%comments-o.svg:$[MINI_ICON_SIZE]%Steam Friends" LaunchWarp steam "steam://open/friends"
Test (x steam) AddToMenu DynamicAppMenu "%steam.svg:$[MINI_ICON_SIZE]%Steam Library" LaunchWarp steam "steam://open/games"


##
# Turns out the break in the DoGOGMenu causes the outer function to break, too.
# So schedule it instead of running it.
DestroyFunc DoGOGMenu
AddToFunc DoGOGMenu
+ I Schedule 250 RealDoGogMenu

Test (x "$[HOME]/GOG Games") AddToMenu DynamicGameMenu "Gold Ole Games" Popup GoGGameMenu
Test (x "$[HOME]/GOG Games") PipeRead 'for title in "$[HOME]/GOG\ Games/"* ; do echo AddToMenu GoGGameMenu \\\"\*${title}/support/icon.png\*${title##*/}\\\" LaunchWarp \\\"${title}/start.sh\\\" ; done'

# Games
# If they exist, put various games in the Games menu:
Test (x abe) AddToMenu DynamicGameMenu "%gavel.svg:$[MINI_ICON_SIZE]%Abe's Amazing Adventure" LaunchWarp abe
Test (x blobwars) AddToMenu DynamicGameMenu "%343-radio-unchecked.svg:$[MINI_ICON_SIZE]%Blobwars: Metal Blob Solid" LaunchWarp blobwars
Test (x freeciv) AddToMenu DynamicGameMenu "%004-office.svg:$[MINI_ICON_SIZE]%FreeCiv" LaunchWarp freeciv
Test (x freecol) AddToMenu DynamicGameMenu "%202-sphere.svg:$[MINI_ICON_SIZE]%FreeCol" LaunchWarp freecol
Test (x freedink) AddToMenu DynamicGameMenu "%171-lab.svg:$[MINI_ICON_SIZE]%Dink Smallwood" LaunchWarp freedink
Test (x freedroidRPG) AddToMenu DynamicGameMenu "%question.svg:$[MINI_ICON_SIZE]%FreeDroid RPG" LaunchWarp freedroidRPG
Test (x nethack,x x-terminal-emulator) AddToMenu DynamicGameMenu "Nethack (console)" LaunchWarp x-terminal-emulator +sb -e nethack
Test (x nexuiz) AddToMenu DynamicGameMenu "nexuiz" LaunchWarp nexuiz
Test (x powder) AddToMenu DynamicGameMenu "%152-magic-wand.svg:$[MINI_ICON_SIZE]%Powder" LaunchWarp powder
Test (x sauerbraten) AddToMenu DynamicGameMenu "sauerbraten" LaunchWarp sauerbraten
Test (x slashem,x x-terminal-emulator) AddToMenu DynamicGameMenu "%bug.svg:!$[MINI_ICON_SIZE]%Slashem (console)" LaunchWarp x-terminal-emulator +sb -e slashem
Test (x tmw) AddToMenu DynamicGameMenu "%question.svg:!$[MINI_ICON_SIZE]%The Mana World" LaunchWarp tmw
Test (x minetest) AddToMenu DynamicGameMenu "Minetest" LaunchWarp minetest

# Editors/Utilities
# If they exist, put various editors into the Apps menu:
Test (x vim,x x-terminal-emulator) AddToMenu DynamicAppMenu "%code.svg:$[MINI_ICON_SIZE]%Vim" LaunchWarp x-terminal-emulator +sb -T Vim -e vim
Test (x gvim) AddToMenu DynamicAppMenu "%code.svg:$[MINI_ICON_SIZE]%GVim" LaunchWarp gvim
Test (x gedit) AddToMenu DynamicAppMenu "%039-file-text2.svg:$[MINI_ICON_SIZE]%GEdit" LaunchWarp gedit
Test (x xclipboard) AddToMenu DynamicAppMenu "%paste.svg:$[MINI_ICON_SIZE]%Clipboard" LaunchWarp xclipboard
Test (x gimp) AddToMenu DynamicAppMenu "%image.svg:$[MINI_ICON_SIZE]%Gimp" LaunchWarp gimp
Test (x inkscape) AddToMenu DynamicAppMenu "%344-crop.svg:$[MINI_ICON_SIZE]%Inkscape" LaunchWarp inkscape

# Settings
# If it exists, put the bluetooth-wizard into the Settings menu
Test (x bluetooth-wizard) AddToMenu SettingsMenu "Bluetooth Wizard" LaunchWarp bluetooth-wizard
Test (x blueman-manager) AddToMenu SettingsMenu "Bluetooth Manager" LaunchWarp blueman-manager

DestroyFunc UnbindKeys
AddToFunc UnbindKeys
+ I Key e A $[MOD_KEY] -
+ I Key b FSTW $[MOD_KEY] -
+ I Key semicolon A $[MOD_KEY] -
+ I Key o A $[MOD_KEY] -
+ I Key r A $[MOD_KEY] -
+ I Key n A $[MOD_KEY] -
+ I Key p A $[MOD_KEY] -
+ I Key Right A $[MOD_KEY] -
+ I Key Left A $[MOD_KEY] -
+ I Key Up A $[MOD_KEY] -
+ I Key Down A $[MOD_KEY] -
+ I Key t A $[MOD_KEY] -
+ I Key Return A $[MOD_KEY] -
+ I Key V A $[MOD_KEY] -
+ I Key 1 A $[MOD_KEY] -
+ I Key 2 A $[MOD_KEY] -
+ I Key 3 A $[MOD_KEY] -
+ I Key 4 A $[MOD_KEY] -
+ I Key 5 A $[MOD_KEY] -
+ I Key 6 A $[MOD_KEY] -
+ I Key 7 A $[MOD_KEY] -
+ I Key 8 A $[MOD_KEY] -
+ I Key 9 A $[MOD_KEY] -
+ I Key M A $[MOD_KEY] -
+ I Key U A $[MOD_KEY] -
+ I Key D A $[MOD_KEY] -
+ I Key h A $[MOD_KEY] -
+ I Key j A $[MOD_KEY] -
+ I Key k A $[MOD_KEY] -
+ I Key l A $[MOD_KEY] -
+ I Key s A 4 -
+ I Key Print A A -
+ I Key Escape A $[MOD_KEY] -
+ I Key Tab A 4 -
+ I Key grave A $[MOD_KEY] -
+ I Key G A $[MOD_KEY] -
+ I Key W A $[MOD_KEY] -
+ I Key F A $[MOD_KEY] -
+ I Key s A $[MOD_KEY] -
+ I Key XF86AudioMute A A -
+ I Key XF86PowerOff A A -
+ I Key bracketleft A $[MOD_KEY] -
+ I Key bracketright A $[MOD_KEY] -
+ I Test (x mpc) Key XF86AudioPlay A A -
+ I Test (x mpc) Key XF86AudioNext A A -
+ I Test (x mpc) Key XF86AudioPrev A A -
+ I Test (x amixer) Key F8 A A -
+ I Test (x amixer) Key F9 A A -
+ I Test (x amixer) Key F10 A A -
+ I Test (x amixer) Key XF86AudioRaiseVolume A A -
+ I Test (x amixer) Key XF86AudioLowerVolume A A -
+ I Test (x touchpad.sh) Key F5 A $[MOD_KEY] -
+ I Mouse 1 $[fvwm_title_button_miniicon] N -
+ I Mouse 2 R N -
+ I Mouse 3 FSTW $[MOD_KEY] -
+ I Mouse 1 FSTW $[MOD_KEY] -
+ I Mouse 4 A $[MOD_KEY] -
+ I Mouse 5 A $[MOD_KEY] -
+ I Mouse 1 I A -
+ I Mouse 1 $[fvwm_title_button_arrow_up] N -
+ I Mouse 1 $[fvwm_title_button_clip] N -


##
# Execution order isn't guaranteed, so make sure we had time for unblind to
# finish before binding anew:
DestroyFunc BindKeys
AddToFunc BindKeys
+ I Schedule 250 RealBind

DestroyFunc RealBind
AddToFunc RealBind
+ I Key e A $[MOD_KEY] Exec exec rofi -show
+ I Key b FSTW $[MOD_KEY] ToggleDecorations
# Nice hinting, auto-complete app selecteor
# Key semicolon A $[MOD_KEY] Exec exec dmenu_run -l 5 -nb "$[BG_COLOR]" -nf "$[FG_COLOR]" -sf "$[HILIGHT_FORE]" -sb "$[HILIGHT_BACK]" -fn "$[MENU_FONT]"
+ I Key semicolon A $[MOD_KEY] Exec exec rofi -show drun
# Pop up the current window options on Win+o
+ I Key o A $[MOD_KEY] Current Popup DynamicWindowOpsMenu Window 0 0
# Resize on win+r
+ I Key r A $[MOD_KEY] Resize Direction SE
# Place again on win+p
+ I Key a A $[MOD_KEY] PlaceAgain
+ I Key p A $[MOD_KEY] Prev-page
+ I Key n A $[MOD_KEY] Next-page
# When Win+Arrow is pressed, move to the corresponding edge of the screen
+ I Key Right A $[MOD_KEY] AnimatedMove Screen $[pointer.screen] -0 keep Warp
+ I Key Left A $[MOD_KEY] AnimatedMove Screen $[pointer.screen] 0 keep Warp
+ I Key Up A $[MOD_KEY] AnimatedMove Screen $[pointer.screen] keep 0 Warp
+ I Key Down A $[MOD_KEY] AnimatedMove Screen $[pointer.screen] keep -0 Warp
# When Win+T is pressed, open a terminal
+ I Key t A $[MOD_KEY] LaunchWarp x-terminal-emulator
+ I Key Return A $[MOD_KEY] LaunchWarp x-terminal-emulator
# Trying something new, display a pager on mod+V that's transient (try arrows)
+ I Key V A $[MOD_KEY] FvwmPager -transient ExposePager 0 $[DESK_COUNT]
##
# It would be nice to use numbers to address the pages, based on desktop size.
# win + N to go to that page
+ I Key 1 A $[MOD_KEY] Go-to-page 1
+ I Key 2 A $[MOD_KEY] Go-to-page 2
+ I Key 3 A $[MOD_KEY] Go-to-page 3
+ I Key 4 A $[MOD_KEY] Go-to-page 4
+ I Key 5 A $[MOD_KEY] Go-to-page 5
+ I Key 6 A $[MOD_KEY] Go-to-page 6
+ I Key 7 A $[MOD_KEY] Go-to-page 7
+ I Key 8 A $[MOD_KEY] Go-to-page 8
+ I Key 9 A $[MOD_KEY] Go-to-page 9
# Move on Win+M
+ I Key M A $[MOD_KEY] Move
# Raise/Lower window on MOD+U/D
+ I Key U A $[MOD_KEY] Raise
+ I Key D A $[MOD_KEY] Lower
# Try some vim movement to move between windows in those directions
+ I Key h A $[MOD_KEY] Direction West (AcceptsFocus, CurrentPage, !WindowListSkip) Warp-Focus
+ I Key j A $[MOD_KEY] Direction South (AcceptsFocus, CurrentPage, !WindowListSkip) Warp-Focus
+ I Key k A $[MOD_KEY] Direction North (AcceptsFocus, CurrentPage, !WindowListSkip) Warp-Focus
+ I Key l A $[MOD_KEY] Direction East (AcceptsFocus, CurrentPage, !WindowListSkip) Warp-Focus
+ I Key s A 4 Screenshot $[w.id]
+ I Key Print A A Screenshot root -screen
# Win+Esc pop up the menu
+ I Key Escape A $[MOD_KEY] Menu MenuFvwmRoot
+ I Key Tab A 4 Menu NewAltTabMenu
+ I Key grave A $[MOD_KEY] Focus-Next-Class
# Grow the current window until it hits something
+ I Key G A $[MOD_KEY] Maximize grow grow
# Toggle between full screen width
+ I Key W A $[MOD_KEY] ToggleWide
# Toggle a 3-state custom maximize
+ I Key F A $[MOD_KEY] CustomMax
# When Win+S is pressed, shade the window (no, this is used for screenshot...
#+I Key s A $[MOD_KEY] WindowShade
# media keys
+ I Key XF86AudioMute A A Exec exec amixer set Master toggle
+ I Key XF86PowerOff A A FvwmForm FvwmForm-QuitForm
# Move left or right a desk on mod+[ mod+]
+ I Key bracketleft A $[MOD_KEY] GoToDesk -1 0 $[DESK_COUNT]
+ I Key bracketright A $[MOD_KEY] GoToDesk 1 0 $[DESK_COUNT]
#Use mpc for music controls
+ I Test (x mpc) Key XF86AudioPlay A A Exec exec mpc pause
+ I Test (x mpc) Key XF86AudioNext A A Exec exec mpc next
+ I Test (x mpc) Key XF86AudioPrev A A Exec exec mpc prev
+ I Test (x amixer) Key F8 A A Exec exec amixer -D pulse sset Master toggle
+ I Test (x amixer) Key F9 A A Exec exec amixer -D pulse sset Master 5%-
+ I Test (x amixer) Key F10 A A Exec exec amixer -D pulse sset Master 5%+
+ I Test (x amixer) Key XF86AudioRaiseVolume A A Exec exec amixer -D pulse sset Master 2%+
+ I Test (x amixer) Key XF86AudioLowerVolume A A Exec exec amixer -D pulse sset Master 2%-
# Touchpad enable/disable
+ I Test (x touchpad.sh) Key F5 A $[MOD_KEY] Exec exec touchpad.sh
+ I Mouse 1 $[fvwm_title_button_miniicon] N Ops-or-Close
# Bind a middle click on the root window to pop up the settings menu.
+ I Mouse 2 R N Menu SettingsMenu
# Bind Win+Right Mouse to resize function
+ I Mouse 3 FSTW $[MOD_KEY] Resize-or-not
# Bind Win+Left Mouse to Moving, raising, and lowering actions
+ I Mouse 1 FSTW $[MOD_KEY] Move-Raise-or-Lower
# Move up or down with Win+Mouse Wheel Up/Down
+ I Mouse 4 A $[MOD_KEY] GoToPage +0p -1p
+ I Mouse 5 A $[MOD_KEY] GoToPage +0p +1p
# Bind Mouse 1 on Icons to DynamicWindowOpsMenu
+ I Mouse 1 I A Menu DynamicWindowOpsMenu
# Mouse click on the icon triggers CustomMax, too
+ I Mouse 1 $[fvwm_title_button_arrow_up] N CustomMax
# Make clicking the paper clip (I-2) call the toggle sticky function
+ I Mouse 1 $[fvwm_title_button_clip] N ToggleSticky
#Key F6 A A Exec exec brightness.sh -d
#Key F7 A A Exec exec brightness.sh -u

DestroyFunc ToggleDecorations
AddToFunc ToggleDecorations
+ I ThisWindow (!State 3) RemoveDecorations
+ I TestRc (NoMatch) PutDecorationsBack

DestroyFunc RemoveDecorations
AddToFunc RemoveDecorations
+ I State 3 on
+ I WindowStyle NoTitle, HandleWidth 0, BorderWidth 0

DestroyFunc PutDecorationsBack
AddToFunc PutDecorationsBack
+ I State 3 off
+ I WindowStyle !NoTitle, HandleWidth $[WINDOW_BORDER_SIZE], BorderWidth $[WINDOW_BORDER_SIZE]

##
# This isn't FVWM terminology, but I'm calling it page number where I number
# each page starting in the upper left, counting horizontally and then
# vertically, regardless of pager dimensions starting at zero.  For example:
# ┌─┬─┬─┐     ┌─┐
# │1│2│3│     │1│
# ├─┼─┼─┤ or  ├─┤  or ...
# │4│5│6│     │2│
# └─┴─┴─┘     └─┘
# In FVWM terminology, the current number is:
#    page.ny * desk.pagesx + page.nx + 1
DestroyFunc Prev-page
AddToFunc Prev-page
+ I PipeRead 'echo Go-to-page $(( ($[page.ny] * $[desk.pagesx]) + $[page.nx]))'

DestroyFunc Next-page
AddToFunc Next-page
+ I PipeRead 'echo Go-to-page $(( ($[page.ny] * $[desk.pagesx]) + $[page.nx] + 2))'


##
# No matter what the layout is (in terms of XxY pages, up to 3x3) go to a
# target page when a number 1 to 9 is specified.
DestroyFunc Go-to-page
AddToFunc Go-to-page
+ I PipeRead "echo GoToPage $$((($0-1)%$[PAGES_X])) $$((($0-1)/$[PAGES_X]))"
#+ I PipeRead "echo Echo GoToPage $$((($0-1)%$[PAGES_X])) $$((($0-1)/$[PAGES_X]))"

# Click and release: start resizing the window on right and bottom edges, left
# click to accept, right to cancel
# OR
# Click and drag to resize in whatever direction the mouse goes
DestroyFunc Resize-or-not
AddToFunc   Resize-or-not
+ H Nop
+ M Resize
+ C Resize Direction SE

# Click and release to raise,
# Click and Hold to move, (or immediately move after clicking...)
# Double Click to Lower
DestroyFunc Move-Raise-or-Lower
AddToFunc Move-Raise-or-Lower
+ H Move
+ M Move
+ C Raise
+ D Lower

DestroyFunc Focus-Prev-Window
AddToFunc Focus-Prev-Window
+ I Prev (!WindowListSkip, AcceptsFocus, !Iconic, CurrentPage) Warp-Focus

DestroyFunc Focus-Next-Window
AddToFunc Focus-Next-Window
+ I Next (!WindowListSkip, AcceptsFocus, !Iconic, CurrentPage) Warp-Focus

DestroyFunc Warp-Focus
AddToFunc Warp-Focus
+ I WarpToWindow 5p 5p

# cycle through other windows of the same class
# similar to gnome/osx but without displaying an icon or list of other windows
# of the same class
DestroyFunc Focus-Next-Class
AddToFunc Focus-Next-Class
+ I Next (!WindowListSkip, AcceptsFocus, CurrentPage, $[w.class]) Warp-Focus

DestroyFunc ToggleWide
AddToFunc ToggleWide
+ I ThisWindow (Maximized) Maximize off
+ I TestRc (NoMatch) ResizeMoveMaximize 100% keep 0 keep

#
# Provides a means of letting the user pick a new wallpaper from a folder.
#
# It only likes png files.
#
# Creates the browser for wallpaper and puts it into a menu 
DestroyFunc WallpaperBrowser
AddToFunc WallpaperBrowser
+ I PipeRead 'test ! -d "$0/.thumbs" && mkdir "$0/.thumbs"; \
   for i in "$0/"*; do \
      iname=${i##*/} ; \
      test -f "$0/.thumbs/${iname}" \
         -a "${i}" -ot "$0/.thumbs/${iname}" || { \
            convert -quality 0 -scale $[WALLPAPER_SCALE] "${i}" "png:$0/.thumbs/${iname}" 2>/dev/null \
               || continue; \
         }; \
   done; \
   for i in "$0/.thumbs/"*; do \
      test -f "$0/${i##*/}" || rm "${i}" ; \
   done'
+ I DestroyMenu "$0"
+ I AddToMenu "$0" Refresh DestroyMenu "$0"
+ I PipeRead 'for file in "$0/".thumbs/*; do \
      iname=${file##*/} ; \
      echo AddToMenu \\"$0\\" \\"\*$0/.thumbs/$iname*$iname\\" ChangeWallpaper \\"$0/$iname\\" ;\
      done'
# Add an option to browse the wallpaper directory with whatever filebrowser is installed
+ I AddToMenu "$0" "\*folder-open.svg:$[MINI_ICON_SIZE]*Browse Directory" LaunchWarp "$[FILEBROWSER_APP]" "$0"

DestroyFunc ScreenshotBrowser
AddToFunc ScreenshotBrowser
+ I PipeRead 'test ! -d "$0/.thumbs" && mkdir "$0/.thumbs"; \
   for i in "$0/"*; do \
      test -f "$0/.thumbs/${i##*/}" \
         -a "${i}" -ot "$0/.thumbs/${i##*/}" || { \
            convert -quality 0 -scale $[SCREEN_SHOT_SCALE] "${i}" "png:$0/.thumbs/${i##*/}" 2>/dev/null \
               || continue; \
         }; \
   done; \
   for i in "$0/.thumbs/"*; do \
      test -f "$0/${i##*/}" || rm "${i}" 2>/dev/null; \
   done'
+ I DestroyMenu "$0"
+ I AddToMenu "$0" Refresh DestroyMenu "$0"
+ I PipeRead 'for file in "$0/".thumbs/*; do \
      iname=${file##*/} ; \
      echo AddToMenu \\"$0\\" \\"\*$0/.thumbs/$iname*$iname\\" Exec exec display \\"$0/$iname\\" ;\
      done'
# Add an option to browse the screenshots directory with whatever filebrowser is installed
+ I AddToMenu "$0" "\*folder-open.svg:$[MINI_ICON_SIZE]*Browse Directory" LaunchWarp "$[FILEBROWSER_APP]" "$0"

# The user can select different images to use as the wallpaper at any time.
# Such selections are saved to and loaded from the wallpaper file in the
# preferences folder.

##
# Update the desk count, requires reload of pager module....
DestroyFunc UpdateDeskCount
AddToFunc UpdateDeskCount
+ I Exec exec echo SetEnv DESK_COUNT "$0" > "$[fvwm_desk_preferences]"
+ I SetEnv DESK_COUNT "$0"
+ I Schedule 250 UpdatePager

# This function changes the wallpaper preference to the image file it is passed
DestroyFunc ChangeWallpaper
AddToFunc ChangeWallpaper
+ I Exec exec echo SetEnv WALLPAPER "$0" > "$[fvwm_wallpaper_preference]"
+ I SetEnv WALLPAPER "$0"
+ I Schedule 250 LoadWallpaper

# This function loads the wallpaper from the preference file
DestroyFunc LoadWallpaper
AddToFunc LoadWallpaper
+ I Test (f "$[fvwm_wallpaper_preference]") Exec exec fvwm-root -r --dither "$[WALLPAPER]"

# Make sure wallpaper loading happens on startup:
AddToFunc StartFunction
+ I DoColorSets
+ I BindKeys
+ I LoadWallpaper
+ I UpdatePager
+ I Module FvwmCommandS
+ I Module FvwmEvent
+ I Test (init) Exec exec $[FVWM_USERDIR]/keyboard.sh
+ I Test (init, x ibus-daemon) Exec exec ibus-daemon -drx
+ I TestRc (NoMatch) Test (x fcitx, init) Exec exec fcitx
+ I Test (init, x nm-applet) Exec exec nm-applet
+ I Test (init, x pasystray) Exec exec pasystray
+ I Test (init, x blueman-applet) Exec exec blueman-applet
+ I Test (init, x bluetooth-applet) Exec exec bluetooth-applet
+ I Test (init, x synclient) Exec exec synclient HorizTwoFingerScroll=1
+ I Test (init, x synclient) Exec exec synclient TapButton3=2
+ I Test (init, x xcompmgr, x transset) Exec exec xcompmgr
+ I Test (init, x xscreensaver) Exec exec xscreensaver -no-splash
+ I Test (Restart, x xcompmgr, x transset) Retransit
+ I PipeRead 'python "$[FVWM_USERDIR]"/display.py -f'
+ I PipeRead 'bash $[FVWM_USERDIR]/theme_customize.sh -f ThemeMenu'
+ I Test (init, x steam) Exec exec steam
+ I DoGOGMenu

*FvwmEvent: Cmd
*FvwmEvent: add_window WindowAdded
*FvwmEvent: PassId

DestroyFunc LaunchWarp
AddToFunc LaunchWarp
+ I PipeRead 'if [ -z $WarpCounter ] ; then \
        echo SetEnv WarpCounter 0 ; \
    else \
        echo SetEnv WarpCounter $((WarpCounter+1)) ; \
    fi'
+ I Exec exec $*

DestroyFunc WindowAdded
AddToFunc WindowAdded
+ I ThisWindow ( URxvt ) MakeTrans
+ I ThisWindow ( xterm ) MakeTrans
+ I ThisWindow ( stterm ) MakeTrans
+ I Test (EnvIsSet WarpCounter) Warp-Focus
+ I Test (EnvIsSet WarpCounter) PipeRead '\
    if [ $WarpCounter -gt 0 ] ; then \
        echo SetEnv WarpCounter $((WarpCounter-1)) ; \
    else \
        echo UnsetEnv WarpCounter ; \
    fi'

DestroyFunc MakeTrans
AddToFunc MakeTrans
+ I Exec exec transset -i $[w.id] 0.9

AddToFunc StartFunction
+ I FvwmPager * *
+ I Test (!x tint2, x trayer, init) Exec exec trayer --widthtype request --heighttype request --align left 2>/dev/null
+ I Test (x tint2, init) Exec exec tint2 2>/dev/null
+ I Test (x nm-applet, init) Exec exec nm-applet 2>/dev/null


DestroyFunc UpdatePager
AddToFunc UpdatePager
+ I PipeRead ' \
printf "Style FvwmPager WindowListSkip, NeverFocus, Sticky, StaysOnBottom\\n" ; \
printf "*FvwmPager: Geometry $[RIGHT_BAR_GEOMETRY]\\n" ; \
printf "*FvwmPager: Font none\\n" ; \
printf "*FvwmPager: SmallFont \\"xft:$[DEFAULT_FONT_FAMILY]:size=6\\"\\n" ; \
printf "*FvwmPager: WindowLabelFormat \\"%%t\\"\\n"; \
printf "*FvwmPager: Balloons \\n"; \
printf "*FvwmPager: BalloonFont \\"xft:[DEFAULT_FONT_FAMILY]:size=12\\" \\n"; \
printf "*FvwmPager: MiniIcons \\n"; \
printf "*FvwmPager: WindowColorsets 0 1 \\n"; \
printf "*FvwmPager: HilightColorset * 1 \\n"; \
printf "*FvwmPager: Colorset * 6 \\n"; \
printf "*FvwmPager: UseSkipList \\n"; \
printf "*FvwmPager: DeskTopScale $[DESKTOP_SCALE] \\n"; \
printf "*FvwmPager: SloppyFocus\\n" '
+ I DesktopSize $[PAGES_X]x$[PAGES_Y]
+ I PipeRead ' \
echo SetEnv PAGES_X "$[PAGES_X]" > "$[fvwm_preferences_dir]"/pager_settings ; \
echo SetEnv PAGES_Y "$[PAGES_Y]" >> "$[fvwm_preferences_dir]"/pager_settings ; '
+ I Schedule 250 RelaunchPager

DestroyFunc RelaunchPager
AddToFunc RelaunchPager
+ I All (FvwmPager) Close
+ I Schedule 250 FvwmPager * *

DestroyFunc TogglePager
AddToFunc TogglePager
+ I All (FvwmPager) Close
+ I TestRc (NoMatch) FvwmPager * *

Test (x $[FVWM_USERDIR]/font_helper.sh) PipeRead '$[FVWM_USERDIR]/font_helper.sh'
Test (x $[FVWM_USERDIR]/border_helper.sh) PipeRead '$[FVWM_USERDIR]/border_helper.sh'

# Window options menu
DestroyMenu DynamicWindowOpsMenu
AddToMenu DynamicWindowOpsMenu DynamicPopupAction DynamicWindowOpsMenuFunction

# This is the function for creating context-sensitive menus
DestroyFunc DynamicWindowOpsMenuFunction
AddToFunc DynamicWindowOpsMenuFunction
+ I DestroyMenu recreate DynamicWindowOpsMenu
+ I AddToMenu DynamicWindowOpsMenu "Window Options: $[w.name]" Title
+ I AddToMenu DynamicWindowOpsMenu Styles Popup StylesMenu
+ I ThisWindow ("Wine") AddToMenu DynamicWindowOpsMenu Focus Focus
+ I AddToMenu DynamicWindowOpsMenu "Toggle Title" ToggleTitle
+ I Test (x xcompmgr, x transset) AddToMenu DynamicWindowOpsMenu "Solidify" Exec exec transset -i $[w.id] 1.0
+ I ThisWindow ("Firefox*",!Iconic) AddToMenu DynamicWindowOpsMenu "New Tab" Exec exec firefox --new-tab about:blank
+ I ThisWindow ("Firefox*") AddToMenu DynamicWindowOpsMenu "New Window" Exec exec firefox --new-window about:blank
+ I ThisWindow ("Firefox*") AddToMenu DynamicWindowOpsMenu "Paste && go (selection)" Exec exec firefox --new-tab "$(xclip -o)"
+ I ThisWindow ("Firefox*") AddToMenu DynamicWindowOpsMenu "Paste && go (clipboard)" Exec exec firefox --new-tab "$(xclip -o -selection clipboard)"
+ I TestRc (Match) AddToMenu DynamicWindowOpsMenu "" Nop
+ I AddToMenu DynamicWindowOpsMenu "%question.svg:$[MINI_ICON_SIZE]%Identify" FvwmIdent
+ I ThisWindow (!Iconic) AddToMenu DynamicWindowOpsMenu "%camera.svg:$[MINI_ICON_SIZE]%Get Screenshot" Screenshot $[w.id]
+ I ThisWindow (!Iconic) AddToMenu DynamicWindowOpsMenu "%image.svg:$[MINI_ICON_SIZE]%Get Screenshot (with borders)" Screenshot $[w.id] -frame
+ I AddToMenu DynamicWindowOpsMenu "" Nop
+ I ThisWindow (Iconic) AddToMenu DynamicWindowOpsMenu "%$[w.miniiconfile]:$[MINI_ICON_SIZE]%Deiconify" Iconify off
+ I ThisWindow (!Iconic) AddToMenu DynamicWindowOpsMenu "%$[w.miniiconfile]:$[MINI_ICON_SIZE]%Iconify" Iconify
+ I TestRc (Match) AddToMenu DynamicWindowOpsMenu "%expand.svg:$[MINI_ICON_SIZE]%Resize" Resize
+ I AddToMenu DynamicWindowOpsMenu "%arrows.svg:$[MINI_ICON_SIZE]%Move" Move
+ I ThisWindow (Maximized) AddToMenu DynamicWindowOpsMenu "%139-shrink.svg:$[MINI_ICON_SIZE]%Un-Maximize" Maximize
+ I TestRc (NoMatch) AddToMenu DynamicWindowOpsMenu "%138-enlarge.svg:$[MINI_ICON_SIZE]%Maximize" Maximize
+ I ThisWindow (Shaded) AddToMenu DynamicWindowOpsMenu "Un-Shade" WindowShade
+ I TestRc (NoMatch) AddToMenu DynamicWindowOpsMenu "%268-minus.svg:$[MINI_ICON_SIZE]%Shade" WindowShade
+ I ThisWindow (Sticky) AddToMenu DynamicWindowOpsMenu "%tack.svg:$[MINI_ICON_SIZE]%Un-Stick" WindowStyle !Sticky
+ I TestRc (NoMatch) AddToMenu DynamicWindowOpsMenu "%tack.svg:$[MINI_ICON_SIZE]%Stick" WindowStyle Sticky
+ I AddToMenu DynamicWindowOpsMenu "" Nop
+ I AddToMenu DynamicWindowOpsMenu "%power.svg:$[MINI_ICON_SIZE]%Close" Close
+ I AddToMenu DynamicWindowOpsMenu "%cudgel.svg:$[MINI_ICON_SIZE]%Kill" Destroy
+ I AddToMenu DynamicWindowOpsMenu "" Nop
+ I AddToMenu DynamicWindowOpsMenu "%folder.svg:$[MINI_ICON_SIZE]%Group Actions" Popup DynamicGroupMenuThingy

# Function to do screenshots and save them to the screenshot pref dir using
# date/time as the name.
DestroyFunc Screenshot
AddToFunc Screenshot
+ I Raise
+ I Exec exec import -window $0 $1 "$[fvwm_screenshots_dir]"/`date +%Y_%m_%d_%b_%H:%M:%S.png`
+ I Schedule 250 ScreenshotBrowser "$[fvwm_screenshots_dir]"

# This is the context-sensitive group menu 
DestroyMenu DynamicGroupMenuThingy
AddToMenu DynamicGroupMenuThingy DynamicPopupAction DynamicGroupMenuThingyFunction

# This creates a context menu for windows based on group (window class)
DestroyFunc DynamicGroupMenuThingyFunction
AddToFunc DynamicGroupMenuThingyFunction
+ I DestroyMenu recreate DynamicGroupMenuThingy
+ I AddToMenu DynamicGroupMenuThingy "Group: $[w.class]" Title
+ I Current + "Close All" Current All ($[w.class]) Close
+ I Current + "Shade All" Current All ($[w.class], !Shaded) WindowShade True
+ I Current + "Un-Shade All" Current All ($[w.class], !Shaded) WindowShade False
+ I Current + "Iconfiy All" Current All ($[w.class], !Iconic) Iconify
+ I Current + "Deiconfiy All" Current All ($[w.class], Iconic) Iconify off
+ I Current + "List" Popup QuickWindowList

#This is used to build the List option of the group context-menu
DestroyMenu QuickWindowList
AddToMenu QuickWindowList DynamicPopupAction DynamicQuickWindowListFunction QuickWindowList

# This creates a window list similar to the NewAltTabFunction, but is used within the group context menu
DestroyFunc DynamicQuickWindowListFunction
AddToFunc DynamicQuickWindowListFunction
+ I DestroyMenu recreate QuickWindowList
+ I AddToMenu QuickWindowList "Desk: $[desk.n]" Title
+ I ThisWindow (Iconic) Current All ($[w.class], CirculateHit, Iconic, AcceptsFocus) EvalQuickWindowList QuickWindowList
+ I ThisWindow (!Iconic) Current All ($[w.class], CirculateHit, !Iconic, AcceptsFocus) EvalQuickWindowList QuickWindowList

# This creates an alt-tab like menu, but it lists the non-iconified windows and then iconified windows -
# the iconified windows have their thumbnails displayed, non-iconified display mini-icons
DestroyMenu NewAltTabMenu
AddToMenu NewAltTabMenu DynamicPopupAction NewAltTabFunction

DestroyFunc NewAltTabFunction
AddToFunc NewAltTabFunction
+ I DestroyMenu NewAltTabMenu
+ I AddToMenu NewAltTabMenu DynamicPopupAction NewAltTabFunction
+ I Current All ( !"Fvwm*", !Iconic, AcceptsFocus ) EvalQuickWindowList NewAltTabMenu
+ I Current All ( !"Fvwm*", Iconic, AcceptsFocus ) EvalQuickWindowListIcons NewAltTabMenu

# Used to create a menu of non-iconified windows
DestroyFunc EvalQuickWindowList
AddToFunc EvalQuickWindowList
+ I Current AddToMenu "$0" %$[w.miniiconfile]:30x30%"$[w.class]: $[w.name]" WindowId $[w.id] Warp-Focus

# Used to create a menu of the iconified windows
DestroyFunc EvalQuickWindowListIcons
AddToFunc EvalQuickWindowListIcons
+ I Current AddToMenu "$0" %$[w.miniiconfile]:30x30%"(i) $[w.class]: $[w.name]" WindowId $[w.id] Warp-Focus
#+ I Current AddToMenu $0 %$[temp_icon_dir]/icon.tmp.$[w.id].png%"$[w.class]: $[w.name]" WindowId $[w.id] WindowListSelectFunction
# Note the above function will not work because I'm not using the temp_icon_dir stuff in this config

# Used to un-iconify windows in the group context menu
DestroyFunc WindowListSelectFunction
AddToFunc WindowListSelectFunction
+ I Iconify off
+ I Warp-Focus


# CustomMax moves the window through various sizes.
#
#  Normal            HalfMax           FullMax
#  ┌┄┄┄┄┄┄┄┄┄┐       ┌─────┐┄┄┄┐       ┌─────────┐
#  ┊         ┊       │     │   ┊       │         │
#  ┌─────┐   ┊       │     │   ┊       │         │
#  │     │   ┊  ▶▶▶  │     │   ┊  ▶▶▶  │         │
#  │     │   ┊       │     │   ┊       │         │
#  └─────┘   ┊       │     │   ┊       │         │
#  ┊         ┊       │     │   ┊       │         │
#  └┄┄┄┄┄┄┄┄┄┘       └─────┘┄┄┄┘       └─────────┘
#  Normal is the default size.
#
#                    HalfMax is vertically maximized.
#
#                                      FullMax is vertically and horizontally
#                                      maximized.
# CustomMax uses a horribly complex set of functions to traverse a state
# machine to put the window into the various sizes.
#
# CustomMax and those other crazy functions use State 1 and State 2 to decide
# what state to go into.
# !1, !2 -> HalfMax,  1, !2
#  1, !2 -> FullMax, !1,  2
# !1,  2 -> Restore, !1, !2
#
# Or, as a sort of grey code truth table:
#  0 0  -> HalfMax and set (1 0)
#  1 0  -> FullMax and set (0 1)
#  0 1  -> Restore and set (0 0)
#

# Entry-point to custom maximization state machine
# Transition from initial state to half max (2)
# or figure out what other state it could be in via Resolve1or2
DestroyFunc CustomMax
AddToFunc CustomMax
+ I ThisWindow (!State 1, !State 2) HalfMax
+ I TestRc (NoMatch) Resolve1or2

# Called when the state machine is not in the initial state
# and the state can only be 1 or 2, so figure out if it's 
# currently state 1 and go to full max
# or (if it's state 2,) restore initial state
DestroyFunc Resolve1or2
AddToFunc Resolve1or2
+ I ThisWindow ( State 1 ) FullMax
+ I TestRc (NoMatch) Restore

# Called when the state machine is in state 1 transitioning to state 2
DestroyFunc FullMax
AddToFunc FullMax
+ I State 1 off
+ I State 2 on
+ I Maximize on
+ I WindowStyle NoTitle

# Called when the state machine is going to state 1
DestroyFunc HalfMax
AddToFunc HalfMax
+ I State 1 on
+ I MakePartlyFull

##
# This function uses state 3 to decide what to do with a window title.  If
# state 3 is set, then it assumes the title is off and turns it on.  If state 3
# is not set, then it assumes the title is on and turns it off.
DestroyFunc ToggleTitle
AddToFunc ToggleTitle
+ I ThisWindow (State 3) WindowStyle Title
+ I TestRc (NoMatch) WindowStyle !Title
+ I Current State 3 Toggle

PipeRead 'echo SetEnv HALF_WIDTH $(($[vp.width]/2))'

# Called when the state machine is going to state 2
DestroyFunc MakePartlyFull
AddToFunc MakePartlyFull
+ I State 2 on
+ I ResizeMoveMaximize $[HALF_WIDTH]p 100% keep 0

# Called when the state machine is going back to initial state
DestroyFunc Restore
AddToFunc Restore
+ I State 2 off
+ I Maximize off
+ I WindowStyle Title

# Disable Attention Grabbers
DestroyFunc UrgencyFunc

# Transparent Windows on Restart
DestroyFunc Retransit
AddToFunc Retransit
+ I All WindowAdded $[w.id]

# Makes the window sticky (or removes stickyness)
DestroyFunc ToggleSticky
AddToFunc ToggleSticky
+ I ThisWindow (Sticky) WindowStyle !Sticky
+ I TestRc (NoMatch) WindowStyle Sticky

AddToMenu StylesMenu "Default" SwapStyle DefaultStyle

DestroyFunc SwapStyle
AddToFunc SwapStyle
+ I WindowStyle UseStyle $0
+ I UpdateStyles
+ I Recapture

PipeRead "echo Echo Config load ended at $(date)"

# The following snippet creates a logout/reboot/shutdown form.
DestroyModuleConfig FvwmForm-QuitForm
*FvwmForm-QuitForm: Font "$[MENU_FONT]"
*FvwmForm-QuitForm: ButtonFont "$[MENU_FONT]"
*FvwmForm-QuitForm: TimeoutFont "$[MENU_FONT]"
*FvwmForm-QuitForm: Colorset 0
*FvwmForm-QuitForm: ItemColorset 0
*FvwmForm-QuitForm: GrabServer
*FvwmForm-QuitForm: WarpPointer
*FvwmForm-QuitForm: Line center
*FvwmForm-QuitForm: Title "Exit"
*FvwmForm-QuitForm: Timeout 20 Quit "Log out will occur in %% seconds."
*FvwmForm-QuitForm: Line center
*FvwmForm-QuitForm: Button quit "Logout" ^M
*FvwmForm-QuitForm: Command Quit
*FvwmForm-QuitForm: Line center
*FvwmForm-QuitForm: Button quit "Reboot" ^B
*FvwmForm-QuitForm: Command FvwmForm FvwmForm-Reboot
*FvwmForm-QuitForm: Line center
*FvwmForm-QuitForm: Button quit "Shut Down" ^B
*FvwmForm-QuitForm: Command FvwmForm FvwmForm-Poweroff
*FvwmForm-QuitForm: Line center
*FvwmForm-QuitForm: Button quit "Cancel" ^[

##
# The following snippet creates a reboot/cancel form.
DestroyModuleConfig FvwmForm-Reboot
*FvwmForm-Reboot: Font "$[MENU_FONT]"
*FvwmForm-Reboot: ButtonFont "$[MENU_FONT]"
*FvwmForm-Reboot: TimeoutFont "$[MENU_FONT]"
*FvwmForm-Reboot: Colorset 0
*FvwmForm-Reboot: ItemColorset 0
*FvwmForm-Reboot: GrabServer
*FvwmForm-Reboot: WarpPointer
*FvwmForm-Reboot: Line center
*FvwmForm-Reboot: Title "Reboot"
*FvwmForm-Reboot: Text "Are you sure you wish to reboot?"
*FvwmForm-Reboot: Line center
*FvwmForm-Reboot: Button quit "Reboot" ^M
*FvwmForm-Reboot: Command Exec exec "/sbin/reboot"
*FvwmForm-Reboot: Button quit "Cancel" ^[

##
# The following snippet creates a shut down/cancel form.
DestroyModuleConfig FvwmForm-Poweroff
*FvwmForm-Poweroff: Font "$[MENU_FONT]"
*FvwmForm-Poweroff: ButtonFont "$[MENU_FONT]"
*FvwmForm-Poweroff: TimeoutFont "$[MENU_FONT]"
*FvwmForm-Poweroff: Colorset 0
*FvwmForm-Poweroff: ItemColorset 0
*FvwmForm-Poweroff: GrabServer
*FvwmForm-Poweroff: WarpPointer
*FvwmForm-Poweroff: Line center
*FvwmForm-Poweroff: Title "Shut Down"
*FvwmForm-Poweroff: Text "Are you sure you wish to shut down?"
*FvwmForm-Poweroff: Line center
*FvwmForm-Poweroff: Button quit "Shut Down" ^M
*FvwmForm-Poweroff: Command Exec exec "/sbin/poweroff"
*FvwmForm-Poweroff: Button quit "Cancel" ^[

